// <auto-generated />
using System;
using AutoStation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoStation.Migrations
{
    [DbContext(typeof(AutoStationContext))]
    [Migration("20250330103102_sadlbv")]
    partial class sadlbv
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AutoStation.Models.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Fuels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAvailable = true,
                            Name = "АИ-92",
                            Price = 45.50m,
                            Volume = 1000m
                        },
                        new
                        {
                            Id = 2,
                            IsAvailable = true,
                            Name = "АИ-95",
                            Price = 48.30m,
                            Volume = 1000m
                        },
                        new
                        {
                            Id = 3,
                            IsAvailable = true,
                            Name = "АИ-98",
                            Price = 51.20m,
                            Volume = 1000m
                        },
                        new
                        {
                            Id = 4,
                            IsAvailable = true,
                            Name = "ДТ",
                            Price = 49.90m,
                            Volume = 1000m
                        });
                });

            modelBuilder.Entity("AutoStation.Models.FuelColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FuelColumns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAvailable = true,
                            Number = 1
                        },
                        new
                        {
                            Id = 2,
                            IsAvailable = true,
                            Number = 2
                        },
                        new
                        {
                            Id = 3,
                            IsAvailable = true,
                            Number = 3
                        },
                        new
                        {
                            Id = 4,
                            IsAvailable = true,
                            Number = 4
                        });
                });

            modelBuilder.Entity("AutoStation.Models.FuelColumnFuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FuelColumnId")
                        .HasColumnType("int");

                    b.Property<int>("FuelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuelId");

                    b.HasIndex("FuelColumnId", "FuelId")
                        .IsUnique();

                    b.ToTable("FuelColumnFuels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuelColumnId = 1,
                            FuelId = 1
                        },
                        new
                        {
                            Id = 2,
                            FuelColumnId = 2,
                            FuelId = 2
                        },
                        new
                        {
                            Id = 3,
                            FuelColumnId = 3,
                            FuelId = 3
                        },
                        new
                        {
                            Id = 4,
                            FuelColumnId = 4,
                            FuelId = 4
                        });
                });

            modelBuilder.Entity("AutoStation.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FuelColumnId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ReservationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuelColumnId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("AutoStation.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FuelColumnId")
                        .HasColumnType("int");

                    b.Property<int>("FuelId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FuelColumnId");

                    b.HasIndex("FuelId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AutoStation.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("VerificationCodeExpiry")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@autostation.com",
                            FirstName = "",
                            IsAdmin = true,
                            IsEmailVerified = true,
                            LastName = "",
                            Password = "admin123",
                            Phone = "",
                            Username = "admin",
                            VerificationCode = "123456",
                            VerificationCodeExpiry = new DateTime(2026, 3, 30, 14, 31, 2, 4, DateTimeKind.Local).AddTicks(4765)
                        });
                });

            modelBuilder.Entity("AutoStation.Models.FuelColumnFuel", b =>
                {
                    b.HasOne("AutoStation.Models.FuelColumn", "FuelColumn")
                        .WithMany("FuelColumnFuels")
                        .HasForeignKey("FuelColumnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoStation.Models.Fuel", "Fuel")
                        .WithMany("FuelColumnFuels")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fuel");

                    b.Navigation("FuelColumn");
                });

            modelBuilder.Entity("AutoStation.Models.Reservation", b =>
                {
                    b.HasOne("AutoStation.Models.FuelColumn", "FuelColumn")
                        .WithMany("Reservations")
                        .HasForeignKey("FuelColumnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoStation.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FuelColumn");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoStation.Models.Transaction", b =>
                {
                    b.HasOne("AutoStation.Models.FuelColumn", "FuelColumn")
                        .WithMany("Transactions")
                        .HasForeignKey("FuelColumnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoStation.Models.Fuel", "Fuel")
                        .WithMany("Transactions")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoStation.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fuel");

                    b.Navigation("FuelColumn");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoStation.Models.Fuel", b =>
                {
                    b.Navigation("FuelColumnFuels");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AutoStation.Models.FuelColumn", b =>
                {
                    b.Navigation("FuelColumnFuels");

                    b.Navigation("Reservations");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AutoStation.Models.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
